오늘은 테이블간의 1:n관계를 표현해보자

##############################

1. 해당 경로로 이동 my site

2. python manage.py startapp blog
이러면, blog라는 폴더 형성

3. mysite폴더 settings로 가서, INSTALLED_APPSs에, 'blog'추가
다음과 같이 쓸 수도 있다. INSTALLED_APPS = INSTALLED_APPS + ['blog']

-여기까지 앱설치-

4.blog폴더의 model에 가서, class 추가, 인터넷에서 손쉽게 다운 가능

5.blog폴더의 admin으로 가, admin.site.register(Post)추가

6.make migration하고, migrate 하기

python manage.py makemigrations

7. python manage.py migrate

8.  python manage.py runserver 커맨드창에서 실행

9 .admin으로 접속 localhost:8000/admin

10. home->blog->post에 username으로 포스트 작성, 수업때는 3개

기본적으로 클래스를 생성하면, id라는 속성을 자동으로 부여한다.

author table에도 id라는 필드 값이 존재한다.

11.python manage.py shell_plus --notebook, 웹과 연동가능한 쥬피터 노트북 열기, 그리고 코딩

#데이터 베이스에서 author_id는 not NULL, 즉, NULL값을 허용하지 않는다.

그래서, 이녀석의 값을 할당해야한다. 실제 만들어진것은 author가 아니라, author_id이다.

12. #lee로 연결된 테이블에, 오늘 점심 메뉴, 머지라는 테이블 샘플 추가 후, DB브라우저에서 확인해보면,

추가된것을 볼 수 있다.

13. 코드 작성후, blog의 view로 가서, 코드 작성

14. mysite의 urls파일에 path추가

blog => index
blog/abc => index

15. template 폴더에 blog 폴더 만들고, list

##################################

base template과 sub template이 존재한다.

base : 기본 기반(반복되는것을 쉽게 사용)
sub : 그 위에서 작업할 템플릿

객체 지향을 만든 이유

C언어 개발자가 많아져서, 몸값이 하락함, 그래서 위기의식을 느끼고 C++(객체 지향언어를 만듦)

객체 지향언어는 어렵고, 느리나, 큰 구조를 설계하기 적합함
